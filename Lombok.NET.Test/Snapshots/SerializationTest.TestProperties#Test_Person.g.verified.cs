//HintName: Test_Person.g.cs
// <auto-generated/>
using Lombok.NET;

namespace Test;
#nullable enable
internal partial class Person
{
    internal void Serialize(string path)
    {
        using global::System.IO.FileStream fileStream = global::System.IO.File.OpenWrite(path);
        using global::System.IO.BinaryWriter binaryWriter = new global::System.IO.BinaryWriter(fileStream);
        binaryWriter.Write(this.S);
        binaryWriter.Write(this.I);
        binaryWriter.Write(this.L);
        binaryWriter.Write(this.Us);
        binaryWriter.Write(this.Ui);
        binaryWriter.Write(base.Ul);
        binaryWriter.Write(base.B);
        binaryWriter.Write(base.Sb);
        binaryWriter.Write(base.F);
        binaryWriter.Write(base.D);
        binaryWriter.Write(base.Dec);
        binaryWriter.Write(base.Str);
        binaryWriter.Write(base.C);
        binaryWriter.Write(base.Boolean);
    }

    internal async global::System.Threading.Tasks.Task SerializeAsync(string path, global::System.Threading.CancellationToken cancellationToken = default)
    {
        await using global::System.IO.FileStream fileStream = global::System.IO.File.OpenWrite(path);
        await using global::System.IO.BinaryWriter binaryWriter = new global::System.IO.BinaryWriter(fileStream);
        binaryWriter.Write(this.S);
        binaryWriter.Write(this.I);
        binaryWriter.Write(this.L);
        binaryWriter.Write(this.Us);
        binaryWriter.Write(this.Ui);
        binaryWriter.Write(base.Ul);
        binaryWriter.Write(base.B);
        binaryWriter.Write(base.Sb);
        binaryWriter.Write(base.F);
        binaryWriter.Write(base.D);
        binaryWriter.Write(base.Dec);
        binaryWriter.Write(base.Str);
        binaryWriter.Write(base.C);
        binaryWriter.Write(base.Boolean);
    }

    internal void Deserialize(string path)
    {
        using global::System.IO.FileStream fileStream = global::System.IO.File.OpenRead(path);
        using global::System.IO.BinaryReader binaryReader = new global::System.IO.BinaryReader(fileStream);
        this.S = binaryReader.ReadInt16();
        this.I = binaryReader.ReadInt32();
        this.L = binaryReader.ReadInt64();
        this.Us = binaryReader.ReadUInt16();
        this.Ui = binaryReader.ReadUInt32();
        base.Ul = binaryReader.ReadUInt64();
        base.B = binaryReader.ReadByte();
        base.Sb = binaryReader.ReadSByte();
        base.F = binaryReader.ReadSingle();
        base.D = binaryReader.ReadDouble();
        base.Dec = binaryReader.ReadDecimal();
        base.Str = binaryReader.ReadString();
        base.C = binaryReader.ReadChar();
        base.Boolean = binaryReader.ReadBoolean();
    }

    internal async global::System.Threading.Tasks.Task DeserializeAsync(string path)
    {
        await using global::System.IO.FileStream fileStream = global::System.IO.File.OpenRead(path);
        using global::System.IO.BinaryReader binaryReader = new global::System.IO.BinaryReader(fileStream);
        this.S = binaryReader.ReadInt16();
        this.I = binaryReader.ReadInt32();
        this.L = binaryReader.ReadInt64();
        this.Us = binaryReader.ReadUInt16();
        this.Ui = binaryReader.ReadUInt32();
        base.Ul = binaryReader.ReadUInt64();
        base.B = binaryReader.ReadByte();
        base.Sb = binaryReader.ReadSByte();
        base.F = binaryReader.ReadSingle();
        base.D = binaryReader.ReadDouble();
        base.Dec = binaryReader.ReadDecimal();
        base.Str = binaryReader.ReadString();
        base.C = binaryReader.ReadChar();
        base.Boolean = binaryReader.ReadBoolean();
    }
}