//HintName: Test_Person.g.cs
// <auto-generated/>
using Lombok.NET;

namespace Test;
#nullable enable
internal partial class Person
{
    internal void Serialize(string path)
    {
        using global::System.IO.FileStream fileStream = global::System.IO.File.OpenWrite(path);
        using global::System.IO.BinaryWriter binaryWriter = new global::System.IO.BinaryWriter(fileStream);
        binaryWriter.Write(this.s);
        binaryWriter.Write(this.i);
        binaryWriter.Write(this.l);
        binaryWriter.Write(this.us);
        binaryWriter.Write(this.ui);
        binaryWriter.Write(base.ul);
        binaryWriter.Write(base.b);
        binaryWriter.Write(base.sb);
        binaryWriter.Write(base.f);
        binaryWriter.Write(base.d);
        binaryWriter.Write(base.dec);
        binaryWriter.Write(base.str);
        binaryWriter.Write(base.c);
        binaryWriter.Write(base.boolean);
    }

    internal async global::System.Threading.Tasks.Task SerializeAsync(string path, global::System.Threading.CancellationToken cancellationToken = default)
    {
        await using global::System.IO.FileStream fileStream = global::System.IO.File.OpenWrite(path);
        await using global::System.IO.BinaryWriter binaryWriter = new global::System.IO.BinaryWriter(fileStream);
        binaryWriter.Write(this.s);
        binaryWriter.Write(this.i);
        binaryWriter.Write(this.l);
        binaryWriter.Write(this.us);
        binaryWriter.Write(this.ui);
        binaryWriter.Write(base.ul);
        binaryWriter.Write(base.b);
        binaryWriter.Write(base.sb);
        binaryWriter.Write(base.f);
        binaryWriter.Write(base.d);
        binaryWriter.Write(base.dec);
        binaryWriter.Write(base.str);
        binaryWriter.Write(base.c);
        binaryWriter.Write(base.boolean);
    }

    internal void Deserialize(string path)
    {
        using global::System.IO.FileStream fileStream = global::System.IO.File.OpenRead(path);
        using global::System.IO.BinaryReader binaryReader = new global::System.IO.BinaryReader(fileStream);
        this.s = binaryReader.ReadInt16();
        this.i = binaryReader.ReadInt32();
        this.l = binaryReader.ReadInt64();
        this.us = binaryReader.ReadUInt16();
        this.ui = binaryReader.ReadUInt32();
        base.ul = binaryReader.ReadUInt64();
        base.b = binaryReader.ReadByte();
        base.sb = binaryReader.ReadSByte();
        base.f = binaryReader.ReadSingle();
        base.d = binaryReader.ReadDouble();
        base.dec = binaryReader.ReadDecimal();
        base.str = binaryReader.ReadString();
        base.c = binaryReader.ReadChar();
        base.boolean = binaryReader.ReadBoolean();
    }

    internal async global::System.Threading.Tasks.Task DeserializeAsync(string path)
    {
        await using global::System.IO.FileStream fileStream = global::System.IO.File.OpenRead(path);
        using global::System.IO.BinaryReader binaryReader = new global::System.IO.BinaryReader(fileStream);
        this.s = binaryReader.ReadInt16();
        this.i = binaryReader.ReadInt32();
        this.l = binaryReader.ReadInt64();
        this.us = binaryReader.ReadUInt16();
        this.ui = binaryReader.ReadUInt32();
        base.ul = binaryReader.ReadUInt64();
        base.b = binaryReader.ReadByte();
        base.sb = binaryReader.ReadSByte();
        base.f = binaryReader.ReadSingle();
        base.d = binaryReader.ReadDouble();
        base.dec = binaryReader.ReadDecimal();
        base.str = binaryReader.ReadString();
        base.c = binaryReader.ReadChar();
        base.boolean = binaryReader.ReadBoolean();
    }
}